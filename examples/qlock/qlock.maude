--- -----------------------------------------------
--- rigid data types ---
--- -----------------------------------------------
fmod LABELS is
 sort Labels .
 ops rm wt cs : -> Labels [ctor].
 op _~_ : Labels Labels -> Bool [comm].
 var  L : Labels .
 eq L ~ L = true .
 eq (rm ~ wt) = false .
 eq (rm ~ cs) = false .
 eq (wt ~ cs) = false .
---
 ceq true = false if rm = wt .
 ceq true = false if rm = cs .
 ceq true = false if wt = cs .
endfm


fth PID is inc BOOL .
 sort Pid .
 op _~_ : Pid Pid -> Bool [comm].
 vars I J : Pid .
 eq I ~ I = true .
 ceq I = J if I ~ J [nonexec]. 
endfth


fmod SEQUENCE{X :: PID} is
 sort Sequence .
 subsorts X$Pid < Sequence .
--- constructors 
 op empty : -> Sequence [ctor] .
 op _`,_ : Sequence Sequence -> Sequence [ctor id: empty assoc].
 vars Q Q' : Sequence . var I : X$Pid .
--- 
 op top : Sequence -> X$Pid .
 eq top(empty) = empty .
 eq top(I,Q) = I .
---
 op get : Sequence -> Sequence .
 eq get(empty) = empty .
 eq get(I,Q) = Q .
---
 ceq true = false if Q,I,Q' := empty .
 ceq [lemma-top]: top(Q,I) = top(Q) if top(Q) :: X$Pid .
endfm

--- -----------------------------------------------
--- nominals ---
--- -----------------------------------------------
fth AGENT is inc BOOL .
 sort Agent .
 op _~_ : Agent Agent -> Bool .
endfth 

fmod NOM {Y :: AGENT}  is
 sort Sys .
 --- actions
 op init : -> Sys [ctor].
 ops want try exit : Sys Y$Agent -> Sys [ctor].
endfm
--- -----------------------------------------------
--- Flexible data types ---
--- there should be a one-to-one correspondence between agents and pids ---
--- -----------------------------------------------
fmod QLOCK{X :: PID , Y :: AGENT} is
  pr LABELS . pr SEQUENCE{X} . pr NOM{Y} .
 --- observers
  op pid : Y$Agent -> X$Pid .
  op pc  : Sys Y$Agent -> Labels .
  op sq  : Sys -> Sequence .
---
 var S : Sys .
 vars I J K : X$Pid .
 vars A B C : Y$Agent .
 var Q : Sequence .
--- init ---
 eq pc(init,A) = rm  .
 eq sq(init) = empty .
--- want ---
 ceq pc(want(S,A),B) = wt        if pc(S,A) = rm /\ A = B [metadata "CA-w1"].
 ceq pc(want(S,A),B) = pc(S,B)   if A ~ B = false         [metadata "CA-w2"].
 ceq pc(want(S,A),B) = pc(S,B)   if pc(S,A) ~ rm = false  [metadata "CA-w3"].
 ceq sq(want(S,A)) = sq(S),pid(A)if pc(S,A) = rm .
 ceq sq(want(S,A)) = sq(S)       if pc(S,A) ~ rm = false .
--- try ---
 ceq pc(try(S,A),B) = cs      if pc(S,A) = wt /\ A = B /\ pid(A),Q := sq(S) [metadata "CA-t1"].
 ceq pc(try(S,A),B) = pc(S,B) if (A ~ B) = false                            [metadata "CA-t2"].
 ceq pc(try(S,A),B) = pc(S,B) if pc(S,A) ~ wt = false                       [metadata "CA-t3"].
 ceq pc(try(S,A),B) = pc(S,B) if top(sq(S)) ~ pid(A) = false                [metadata "CA-t4"].
 eq sq(try(S,A))    = sq(S) .
--- exit ---
 ceq pc(exit(S,A),B) = rm        if pc(S,A) = cs /\  A = B        [metadata "CA-e1"].
 ceq pc(exit(S,A),B) = pc(S,B)   if pc(S,A) = cs /\  A ~ B = false[metadata "CA-e2"].
 ceq pc(exit(S,A),B) = pc(S,B)   if pc(S,A) ~ cs = false          [metadata "CA-e3"].
 ceq sq(exit(S,A))   = get(sq(S))if pc(S,A) = cs .
 ceq sq(exit(S,A))   = sq(S)       if pc(S,A) ~ cs = false .
endfm 
