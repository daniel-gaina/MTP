view Oid from TRIV to CONFIGURATION is
 sort Elt to Oid .
endv

fmod MAYBE{X :: TRIV} is
 sort Maybe{X} .
 subsort X$Elt < Maybe{X} .
 op maybe : -> Maybe{X} [ctor] .
endfm

view Module from TRIV to META-MODULE is
 sort Elt to Module .
endv

fmod DATABASE is
 pr SET{Module} * (sort Set{Module} to Database) .
endfm

fmod AUX-MODULE-OPS is
 pr META-LEVEL .

 var  SSDS : SubsortDeclSet .
 vars IL IL' : ImportList .
 var  EqS : EquationSet .
 vars ODS ODS' : OpDeclSet .
 vars SS SS' : SortSet .
 vars RS RS' : RuleSet .
 var  MAS : MembAxSet .
 var  Ct : Constant .
 var  M : Module .
 var  H : Header .
 var  Q : Qid .

 op setImports : Module ImportList -> Module .
 eq setImports(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, IL')
    = fmod H is IL' sorts SS . SSDS ODS MAS EqS endfm .
 eq setImports(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, IL')
    = mod H is IL' sorts SS . SSDS ODS MAS EqS RS endm .

 op setSorts : Module SortSet -> Module .
 eq setSorts(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, SS')
    = fmod H is IL sorts SS' . SSDS ODS MAS EqS endfm .
 eq setSorts(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, SS')
    = mod H is IL sorts SS' . SSDS ODS MAS EqS RS endm .

 op setOps : Module OpDeclSet -> Module .
 eq setOps(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, ODS')
    = fmod H is IL sorts SS . SSDS ODS' MAS EqS endfm .
 eq setOps(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, ODS')
    = mod H is IL sorts SS . SSDS ODS' MAS EqS RS endm .

 op setRls : Module RuleSet -> Module .
 eq setRls(fmod H is IL sorts SS . SSDS ODS MAS EqS endfm, RS')
    = fmod H is IL sorts SS . SSDS ODS MAS EqS endfm .
 eq setRls(mod H is IL sorts SS . SSDS ODS MAS EqS RS endm, RS')
    = mod H is IL sorts SS . SSDS ODS MAS EqS RS' endm .

 op addImports : Module ImportList -> Module .
 eq addImports(M, IL) = setImports(M, (getImports(M) IL)) .

 op addSorts : Module SortSet -> Module .
 eq addSorts(M, SS) = setSorts(M, getSorts(M) ; SS) .

 op addOps : Module OpDeclSet -> Module .
 eq addOps(M, ODS) = setOps(M, getOps(M) ODS) .

 op addRls : Module RuleSet -> Module .
 eq addRls(M, RS) = setRls(M, getRls(M) RS) .

 op downQid : Term -> [Qid] [memo] .
 eq downQid(Ct) = qid(substr(string(getName(Ct)), 1, length(string(getName(Ct))))) .

 op emptyModule : Header -> Module .
 eq emptyModule(H) = mod H is nil sorts none . none none none none none endm .
endfm