load metaInterpreter.maude
load predef_modules.maude
load aux_modules.maude
load goal.maude
load proof_tactics.maude
load grammar.maude
load parsing.maude
load file.maude

fmod COMMAND-PROCESSING is
 pr QUANTIFICATION-OPS .
 pr PARSING-RESULT .
 pr META-LEVEL .
 pr LEXICAL .

 vars RIG RIG' NOM NOM' FLE FLE' SS : SortSet .
 vars M M' M'' TOP TOP' FLAT FLAT' : Module .
 vars VS VS' UV UV' EV EV' : VariableSet .
 vars TL TL' TL'' TL1 TL2 ACC : TermList .
 vars T T' T'' T1 T2 T3 T4 TQ : Term .
 vars QIL QIL' ERR ERR' : QidList .
 vars PL PL' : ParameterDeclList .
 var  SSDS : SubsortDeclSet .
 vars TyL TyL' : TypeList .
 var  RP? : [ResultPair] .
 var  COND : Condition .
 var  PR : ParsingRes .
 var  ODS : OpDeclSet .
 vars Ty Ty' : Type .
 var  AtS : AttrSet .
 var  DB : Database .
 vars S S' : String .
 var  Eq : Equation .
 vars Q Q' FQ : Qid .
 var  V : Variable .
 var  OP : OpDecl .
 var  I : Import .
 var  Srt : Sort .
 var  H : Header .
 var  N : Nat .


 op parseModule : Term -> ParsingRes .
 ceq parseModule('spec!_=_end[T,T']) = parseNoBubbles(M, T')
  if H := parseHeader(T) /\
     M := emptyModule(H) .
 ceq parseModule('spec*_=_end[T,T']) = parseNoBubbles(M, T')
  if H := parseHeader(T) /\
     M := emptyTheory(H) .

 op parseNoBubbles : Module Term -> ParsingRes .
 ceq parseNoBubbles(M, '__[T, T']) = [M'', (TL, TL'),
                                      < (RIG ; RIG'), (NOM ; NOM'), (FLE ; FLE') >, ERR ERR' ]
  if [M', TL, < RIG, NOM, FLE >, ERR] := parseDefNoBubble(M, T) /\
     [M'', TL', < RIG', NOM', FLE' >, ERR'] := parseNoBubbles(M', T') .
 eq parseNoBubbles(M, T) = parseDefNoBubble(M, T) [owise] .

 op parseDefNoBubble : Module Term -> ParsingRes .
 ***(
           PARSING IMPORTATION DECLARATIONS
 )
 ceq parseDefNoBubble(M, 'pr_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := protecting Q . /\
     M' := addImports(M, I) .
 ceq parseDefNoBubble(M, 'ex_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := extending Q . /\
     M' := addImports(M, I) .
 ceq parseDefNoBubble(M, 'inc_.['token[T]]) = [M', empty, < none, none, none >, nil ]
  if Q := downQid(T) /\
     I := including Q . /\
     M' := addImports(M, I) .
 ***(
           PARSING SORT DECLARATIONS
 )
 ceq parseDefNoBubble(M, 'rigid`sort_.['neTokenList[T]]) = [M', empty, < SS, none, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ceq parseDefNoBubble(M, 'rigid`sorts_.['neTokenList[T]]) = [M', empty, < SS, none, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ceq parseDefNoBubble(M, 'nominal`sort_.['neTokenList[T]]) = [M'', empty, < none, SS, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) /\
     SSDS := genSubsortNominal(SS) /\
     M'' := addSubsorts(M', SSDS) .
 ceq parseDefNoBubble(M, 'nominal`sorts_.['neTokenList[T]]) = [M'', empty, < none, SS, none >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) /\
     SSDS := genSubsortNominal(SS) /\
     M'' := addSubsorts(M', SSDS) .
 ceq parseDefNoBubble(M, 'sort_.['neTokenList[T]]) = [M', empty, < none, none, SS >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ceq parseDefNoBubble(M, 'sorts_.['neTokenList[T]]) = [M', empty, < none, none, SS >, nil ]
  if SS := parseSortList(T) /\
     M' := addSorts(M, SS) .
 ***(
          SUBSORTS, OPERATORS, EQUATIONS, AND VARIABLES ARE PARSED LATED.
          It makes sense because they might need sorts, kinds, and operators from imported modules
          and parameters.
 )
 eq parseDefNoBubble(M, T) = [M, T, < none, none, none >, nil ] [owise] . *** TODO!!!

 op parseArity : Term -> TypeList .
 eq parseArity('__[TL]) = parseArity*(TL) .
 eq parseArity(T) = downQid(T) [owise] .

 op parseArity* : TermList -> TypeList .
 eq parseArity*((T, TL)) = downQid(T) parseArity*(TL) .
 eq parseArity*(empty) = nil .

 op parseSortList : Term -> SortSet .
 eq parseSortList('__[TL]) = parseSortList*(TL) .
 eq parseSortList(T) = downQid(T) [owise] .

 op parseSortList* : TermList -> SortSet .
 eq parseSortList*((T, TL)) = downQid(T) ; parseSortList*(TL) .
 eq parseSortList*(empty) = none .

 op genSubsortNominal : SortSet -> SubsortDeclSet .
 eq genSubsortNominal(none) = none .
 eq genSubsortNominal(Srt ; SS) = subsort Srt < '@Nominal@ . genSubsortNominal(SS) .

 op parseAttr : Module VariableSet Term -> AttrSet .
 eq parseAttr(M, VS, '__[TL]) = parseAttr*(M, VS, TL) .
 eq parseAttr(M, VS, 'ctor.@Attr@) = ctor .
 eq parseAttr(M, VS, 'iter.@Attr@) = iter .
 eq parseAttr(M, VS, 'assoc.@Attr@) = assoc .
 eq parseAttr(M, VS, 'comm.@Attr@) = comm .
 eq parseAttr(M, VS, 'idem.@Attr@) = idem .
 eq parseAttr(M, VS, 'memo.@Attr@) = memo .
 ceq parseAttr(M, VS, 'id:_['bubble[T]]) = id(T1)
  if QIL := downQidList(T) /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) .
 ceq parseAttr(M, VS, 'nominal`(_`)['neTokenList[T]]) = metadata(S)
  if TyL := downTypeList(T) /\
     S := typeList2String(TyL) .

 op parseAttr* : Module VariableSet TermList -> AttrSet .
 eq parseAttr*(M, VS, empty) = none .
 eq parseAttr*(M, VS, (T, TL)) = parseAttr(M,  VS,T) parseAttr*(M,  VS,TL) .

 ***(
    Extracts the typelist if the nominal attribute is used.
    Otherwise, it returns the nil typelist.
 )
 op nominalSorts : Module Term -> TypeList .
 eq nominalSorts(M, '__[TL]) = nominalSorts*(M, TL) .
 ceq nominalSorts(M, 'nominal`(_`)['neTokenList[T]]) = TyL
  if TyL := downTypeList(T) .
 eq nominalSorts(M, T) = nil [owise] .

 op nominalSorts* : Module TermList -> TypeList .
 eq nominalSorts*(M, empty) = nil .
 ceq nominalSorts*(M, (T, TL)) = if TyL =/= nil
                                 then TyL
                                 else nominalSorts*(M, TL)
                                 fi
  if TyL := nominalSorts(M, T) .

 op downTypeList : Term -> TypeList .
 eq downTypeList('__[TL]) = downTypeList*(TL) .
 eq downTypeList(T) = downQid(T) [owise] .

 op downTypeList* : TermList -> TypeList .
 eq downTypeList*(empty) = nil .
 eq downTypeList*((T, TL)) = downTypeList(T) downTypeList*(TL) .

 op typeList2String : TypeList -> String .
 eq typeList2String(nil) = "" .
 eq typeList2String(Ty TyL) = string(Ty) + typeList2String(TyL) .


 ***(
 ops id:_ : @Bubble@ -> @Attr@ .
 op prec_ : @Token@ -> @Attr@ .
 op metadata_ : @Token@ -> @Attr@ .
 )

***(
      Header
)
 op parseHeader : Term -> Header .
 ceq parseHeader('token[T]) = Q
  if Q := downQid(T) .
 ceq parseHeader('_`{_`}['token[T], T']) = Q{PL}
  if Q := downQid(T) /\
     PL := parsePL(T') .

 op parsePL : Term -> ParameterDeclList .
 ceq parsePL('_`,_[T, T']) = PL, PL'
  if PL := parsePL(T) /\
     PL' := parsePL(T') .
 ceq parsePL('_::_['token[T], 'token[T']]) = Q :: Q'
  if Q := downQid(T) /\
     Q' := downQid(T') .

 *** Top module, Flat module, Vars and equations
 op parseBubbles : Module Module TermList -> ParsingRes .
 eq parseBubbles(TOP, FLAT, TL) = parseBubbles(TOP, FLAT, none, reorderOps(TL), empty) .

 ***(
             PARSE VARIABLES
 )
 *** Top module, Flat module, VariableSet, Vars and equations, Acc
 op parseBubbles : Module Module VariableSet TermList TermList -> ParsingRes .
 eq parseBubbles(TOP, FLAT, VS, empty, ACC) = parseEqs(TOP, FLAT, VS, ACC) .
 ceq parseBubbles(TOP, FLAT, VS, ('var_:_.['neTokenList[T],'token[T']], TL), ACC) =
                             parseBubbles(TOP, FLAT, VS ; VS', TL, ACC)
  if VS' := parseVars(T, T') .
 ceq parseBubbles(TOP, FLAT, VS, ('vars_:_.['neTokenList[T],'token[T']], TL), ACC) =
                             parseBubbles(TOP, FLAT, VS ; VS', TL, ACC)
  if VS' := parseVars(T, T') .
 ***(
           PARSING SUBSORT DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('subsort_<_.['neTokenList[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if SS := parseSortList(T) /\
     Ty := downQid(T') /\
     SSDS := createSubsortDecls(SS, Ty) /\
     TOP' := addSubsorts(TOP, SSDS) /\
     FLAT' := addSubsorts(FLAT, SSDS) .
 ***(
           PARSING OP DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`->_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     OP := op Q : nil -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`->_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, VS, T'') /\
     OP := op Q : nil -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) /\
     TyL' := nominalSorts(TOP, T'') [print TyL'] .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_->_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     TyL := parseArity(T') /\
     Q' := downQid(T'') /\
     OP := op Q : TyL -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                                parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T1) /\
     TyL := parseArity(T2) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, VS, T4) /\
     OP := op Q : TyL -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) /\
     TyL' := nominalSorts(TOP, T4) .
 ***(
           PARSING PARTIAL OP DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`~>_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     OP := op Q : nil -> Q' [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:`~>_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, VS, T'') /\
     OP := op Q : nil -> Q' [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) /\
     TyL' := nominalSorts(TOP, T'') .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_~>_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     TyL := parseArity(T') /\
     Q' := downQid(T'') /\
     OP := op Q : toKind(FLAT, TyL) -> toKind(FLAT, Q') [none] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) .
 ceq parseBubbles(TOP, FLAT, VS, ('op_:_~>_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                      parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T1) /\
     TyL := parseArity(T2) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, VS, T4) /\
     OP := op Q : toKind(FLAT, TyL) -> toKind(FLAT, Q') [AtS] . /\
     TOP' := addOps(TOP, OP) /\
     FLAT' := addOps(FLAT, OP) /\
     TyL' := nominalSorts(TOP, T4) .
 ***(
           PARSING FLEXIBLE OP DECLARATIONS
 )
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:`->_.['token[T],'token[T']], TL), ACC) = parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     FQ := createFlexOpName(Q, nil) /\
     Q' := downQid(T') /\
     ODS := (op FQ : '@Nominal@ -> Q' [none] .
             op Q : nil -> Q' [none] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) .
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:`->_`[_`].['token[T],'token[T'], T''], TL), ACC) =
                                                                               parseBubbles(TOP', FLAT', VS, TL, ACC)
  if Q := downQid(T) /\
     FQ := createFlexOpName(Q, nil) /\
     Q' := downQid(T') /\
     AtS := parseAttr(FLAT, VS, T'') /\
     ODS := (op FQ : '@Nominal@ -> Q' [AtS] .
             op Q : nil -> Q' [AtS] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) /\
     TyL' := nominalSorts(TOP, T'') .
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:_->_.['token[T],'neTokenList[T'],'token[T'']], TL), ACC) =
                                                                               parseBubbles(TOP', FLAT', VS, TL, ACC)
  if TyL := parseArity(T') /\
     Q := downQid(T) /\
     FQ := createFlexOpName(Q, TyL) /\
     Q' := downQid(T'') /\
     ODS := (op FQ : '@Nominal@ TyL -> Q' [none] .
             op Q : TyL -> Q' [none] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) .
 ceq parseBubbles(TOP, FLAT, VS, ('flexible`op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[T3], T4], TL), ACC) =
                                                                               parseBubbles(TOP', FLAT', VS, TL, ACC)
  if TyL := parseArity(T2) /\
     Q := downQid(T1) /\
     FQ := createFlexOpName(Q, TyL) /\
     Q' := downQid(T3) /\
     AtS := parseAttr(FLAT, VS, T4) /\
     ODS := (op FQ : '@Nominal@ TyL -> Q' [AtS] .
             op Q : TyL -> Q' [AtS] .) /\
     TOP' := addOps(TOP, ODS) /\
     FLAT' := addOps(FLAT, ODS) /\
     TyL' := nominalSorts(TOP, T4) .


 ***(
 Reorders the list in order to parse constants first.
 In this way we can later parse id attributes
 )
 op reorderOps : TermList -> TermList .
 ceq reorderOps((TL, Q[TL1], TL', Q'[TL2], TL'')) = reorderOps((TL, Q'[TL2], TL', Q[TL1], TL''))
  if ((Q == 'op_:_->_.) or (Q == 'op_:_->_`[_`].)) /\
     ((Q' == 'op_:`->_. ) or (Q' == 'op_:`->_`[_`].)) .
 eq reorderOps(TL) = TL [owise] .

***(
op f : A1 A2 -> A3 [flexible(NS1, NS3)] .

op @__f(_,_)

op _f_ : A1 A2 -> A3 [flexible(NS1, NS3)] .

op @__._f_ : A1 A2 -> A3 [flexible(NS1, NS3)] .

f(current:NS1, current:NS2,a,b)


f(a,b)          -> @ Current:NS1 Current:NS3 . f(a,b)
@ X . f(a,b)    -> @ X Current:NS3 . f(a,b)
@ Y . f(a,b)    -> @ Current:NS1 Y . f(a,b)
@ X Y . f(a,b)  -> @ X Y . f(a,b)




op @_f(_,_) : @Nominal@ A1 A2 -> A3 .
op f : A1 A2 -> A3 .

flexible op _f_ : A1 A2 -> A3 .

op @__f_ : @Nominal@ A1 A2 -> A3
op _f_ : A1 A2 -> A3 .


)

 ***(
           PARSING PREDICATES
 )
 eq parseBubbles(TOP, FLAT, VS, ('pred_.[T], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:`->_.[T,'token[''Bool.Qid]], TL), ACC) .

 eq parseBubbles(TOP, FLAT, VS, ('pred_`[_`].['token[T],T''], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:`->_`[_`].['token[T],'token[''Bool.Qid], T''], TL), ACC) .
 eq parseBubbles(TOP, FLAT, VS, ('pred_:_.['token[T],'neTokenList[T']], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:_->_.['token[T],'neTokenList[T'],'token[''Bool.Qid]], TL), ACC) .
 eq parseBubbles(TOP, FLAT, VS, ('pred_:_`[_`].['token[T1],'neTokenList[T2],T4], TL), ACC) =
              parseBubbles(TOP, FLAT, VS, ('op_:_->_`[_`].['token[T1],'neTokenList[T2],'token[''Bool.Qid], T4], TL), ACC) .
 ***(
             OWISE
 )
 eq parseBubbles(TOP, FLAT, VS, (T, TL), ACC) = parseBubbles(TOP, FLAT, VS, TL, (ACC, T)) [owise] .

 ***(
             PARSE EQUATIONS
 )
 op parseEqs : Module Module VariableSet TermList -> ParsingRes .
 eq parseEqs(TOP, FLAT, VS, empty) = [TOP, VS, nil] .
 ceq parseEqs(TOP, FLAT, VS, (T, TL)) = parseEqs(M, FLAT, VS, TL)
  if Eq := parseEq(FLAT, VS, T) /\
     M := addEqs(TOP, Eq) .

 op parseEq : Module VariableSet Term -> Equation .
 ceq parseEq(M, VS, 'eq_=_.['bubble[T], 'bubble[T']]) = eq T1 = T2 [none] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) .
 op parseEq : Module VariableSet Term -> Equation .
 ceq parseEq(M, VS, 'eq_._=_.[TQ, 'bubble[T], 'bubble[T']]) = eq T1 = T2 [AtS] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) /\
     < UV, EV > := extractQuantVars(TQ, VS) /\
     AtS := generateQuantificationAtts(UV, EV) .
 ceq parseEq(M, VS, 'ceq_=_if_.['bubble[T], 'bubble[T'],T'']) = ceq T1 = T2 if COND [none] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) /\
     COND := parseCondition(M, T'', VS) .
 ceq parseEq(M, VS, 'ceq_._=_if_.[TQ, 'bubble[T], 'bubble[T'],T'']) = ceq T1 = T2 if COND [AtS] .
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) /\
     COND := parseCondition(M, T'', VS) /\
     < UV, EV > := extractQuantVars(TQ, VS) /\
     AtS := generateQuantificationAtts(UV, EV) .

 op parseCondition : Module Term VariableSet -> Condition .
 eq parseCondition(M, '_/\_[TL], VS) = parseCondition*(M, TL, VS) .
 ceq parseCondition(M, '_=_['bubble[T], 'bubble[T']], VS) = (T1 = T2)
  if QIL := downQidList(T) /\
     QIL' := downQidList(T') /\
     {T1, Ty} := metaParse(M, VS, QIL, anyType) /\
     {T2, Ty'} := metaParse(M, VS, QIL', anyType) .

 op parseCondition* : Module TermList VariableSet -> Condition .
 eq parseCondition*(M, empty, VS) = nil .
 eq parseCondition*(M, (T, TL), VS) = parseCondition(M, T, VS) /\ parseCondition*(M, TL, VS) .

 op parseVars : Term Term -> VariableSet .
 ceq parseVars(T, T') = createVars(QIL, Ty)
  if QIL := parseVars(T) /\
     Ty := downQid(T') .

 op parseVars : Term -> QidList .
 eq parseVars('__[TL]) = parseVars*(TL) .
 eq parseVars(T) = downQid(T) [owise] .

 op parseVars* : TermList -> QidList .
 eq parseVars*(empty) = nil .
 eq parseVars*((T, TL)) = downQid(T) parseVars*(TL) .

 op createVars : QidList Type -> VariableSet .
 eq createVars(nil, Ty) = none .
 ceq createVars(Q QIL, Ty) = V ; createVars(QIL, Ty)
  if V := qid(string(Q) + ":" + string(Ty)) .

 op extractTerms : Term -> TermList .
 eq extractTerms('__[TL]) = extractTerms*(TL) .
 eq extractTerms(T) = T [owise] .

 op extractTerms* : TermList -> TermList .
 eq extractTerms*(empty) = empty .
 eq extractTerms*((T, TL)) = extractTerms(T), extractTerms*(TL) .

 op createSubsortDecls : SortSet Type -> SubsortDeclSet .
 eq createSubsortDecls(none, Ty) = none .
 eq createSubsortDecls(Ty ; SS, Ty') = subsort Ty < Ty' .
                                       createSubsortDecls(SS, Ty') .

 op createFlexOpName : Qid TypeList -> Qid .
 eq createFlexOpName(Q, nil) = qid("@_" + string(Q)) .
 eq createFlexOpName(Q, TyL) = $createFlexOpName(Q, | TyL |) [owise] .

 op $createFlexOpName : Qid NzNat -> Qid .
 ceq $createFlexOpName(Q, N) = qid("@_" + string(Q))
  if S := string(Q) /\
     find(S, "_", 0) =/= notFound .
 ceq $createFlexOpName(Q, N) = Q'
  if S := string(Q) /\
     find(S, "_", 0) == notFound /\
     Q' := qid("@_" + string(Q) + addUnderscores(N)) .

 op |_| : TypeList -> Nat .
 eq | nil | = 0 .
 eq | Ty TyL | = s(| TyL |) .

 op addUnderscores : NzNat -> String .
 eq addUnderscores(N) = "(" + $addUnderscores(N) + ")" .

 op $addUnderscores : NzNat -> String .
 eq $addUnderscores(1) = "_" .
 eq $addUnderscores(s(N)) = "_," + $addUnderscores(N) [owise] .

 op vars2str : VariableSet -> String .
 eq vars2str(none) = "" .
 eq vars2str(V) = string(V) .
 eq vars2str(V ; VS) = string(V) + " ; " + vars2str(VS) [owise] .

 op generateQuantificationAtts : VariableSet VariableSet -> AttrSet .
 eq generateQuantificationAtts(UV, none) = none .
 eq generateQuantificationAtts(UV, EV) = nonexec metadata(vars2str(EV)) .
endfm

mod MTP is
 pr (MAYBE * (op maybe to noMod)){Module} .
 pr (MAYBE * (op maybe to noQid)){Qid} .
 pr (MAYBE * (op maybe to null)){Oid} .
 pr COMMAND-PROCESSING .
 inc META-INTERPRETER .
 pr META-MTP-SIGN .
 pr PRELOAD-LIST .
 inc STD-STREAM .
 pr ERROR-MSGS .
 pr DATABASE .
 pr PARSING .
 pr TACTICS .
 inc FILE .

 vars Text Original Read Source STR MSG : String .
 vars TL TL' BUBBS MODL IN INPLST : TermList .
 vars T T' T'' T1 T2 T3 T4 : Term .
 vars FHIn FHOut MI : Oid .
 var  MM : Maybe{Module} .
 var  AtS : AttributeSet .
 var  LP : List{Preload} .
 vars DB DB' : Database .
 vars QIL ERR : QidList .
 vars M M' TOP : Module .
 var  VS : VariableSet .
 var  MQ : Maybe{Qid} .
 var  SI : SortInfo .
 vars Ty Ty' : Type .
 var  GL : GoalList .
 var  G : Goal .
 var  Q : Qid .
 var  N : Nat .

 sort State .
 *** Initial state, metainterpreter is created
 op init : -> State [ctor] .
 *** Loading from standard database
 op load-std-db : -> State [ctor] .
 *** Loading grammar
 op load-grammar : -> State [ctor] .
 *** Create user metainterpreter
 op load-user-mi : -> State [ctor] .
 *** Load modules into user metainterpreter
 op load-user-mods : -> State [ctor] .
 *** Waiting input from the user
 op idle : -> State [ctor] .
 *** Reading file
 op readFile : -> State [ctor] .
 *** Parsing Module - metaparse
 op parseModMetaparse : -> State [ctor] .
 *** Parsing - create module list
 op parseList : -> State [ctor] .
 *** Parsing Module
 op parseModBubbles : -> State [ctor] .
 *** Parsing Module
 op parseModule : -> State [ctor] .
 *** Get parsed module
 op getModule : -> State [ctor] .
 *** Parsing command
 op parseComm : -> State [ctor] .
 *** Execute command
 op executeComm : -> State [ctor] .
 *** Waits for a wrote msg and returns to idle with getLine
 op print&idle : -> State [ctor] .
 *** Waits for a wrote msg and keeps executing commands.
 op print&executeComm : -> State [ctor] .
 *** Extracts the goal module from the metainterpreter
 op processGoal : -> State [ctor] .



 op foo : -> State [ctor] .

 *** Object and class definition
 op MTP : -> Cid .
 op mtp : -> Oid .

 *** Attributes
 op uload:_ : List{Preload} -> Attribute [ctor gather (&)] .
 op load:_ : List{Preload} -> Attribute [ctor gather (&)] .
 op parsModName:_ : Maybe{Qid} -> Attribute [ctor] .
 op module:_ : Maybe{Module} -> Attribute [ctor] .
 op current:_ : Maybe{Qid} -> Attribute [ctor] .
 op top:_ : Maybe{Module} -> Attribute [ctor] .
 op bubbles:_ : TermList -> Attribute [ctor] .
 op file:_ : Maybe{Oid} -> Attribute [ctor] .
 op input:_ : TermList -> Attribute [ctor] .
 op goal:_ : GoalList -> Attribute [ctor] .
 op db:_ : Database -> Attribute [ctor] .
 op state:_ : State -> Attribute [ctor] .
 op out:_ : String -> Attribute [ctor] .
 op umi:_ : Oid -> Attribute [ctor] .
 op mi:_ : Oid -> Attribute [ctor] .

 *** Initial value for loading into the parsing metainterpreter
 op modList : -> List{Preload} .
 eq modList = module('TRUTH-VALUE) module('BOOL-OPS) module('TRUTH) module('BOOL)
              module('EXT-BOOL) module('NAT) module('INT) module('RAT) module('FLOAT)
              module('STRING) module('CONVERSION) module('QID) module('TRIV)
              view('Qid) module('LIST) module('QID-LIST) module('COMMON-SIGN)
              module('SPEC-SIGN) module('COMMAND-SIGN) module('MTP-SIGN) .

 *** Initial value for loading into the user metainterpreter
 op umodList : -> List{Preload} .
 eq umodList = module('TRUTH-VALUE) module('BOOL-OPS) module('TRUTH) module('BOOL)
               module('NAT) module('TRIV) module('@NOMINAL@) .

 *** Run command
 op run : -> Configuration [ctor] .

 ***                                 ***
 ***          PARSE COMMAND          ***
 ***                                 ***

 rl [parseComm] : gotLine(mtp, stdin, Text)
    < mtp : MTP | mi: MI, state: idle, AtS >
 => < mtp : MTP | mi: MI, state: parseComm, AtS >
    parseTerm(MI, mtp, 'GRAMMAR, none, tokenize(Text), '@Input@) .

 crl [parseComm] :
     parsedTerm(mtp, MI, {T, Ty})
     < mtp : MTP | mi: MI, state: parseComm, input: IN, AtS >
  => < mtp : MTP | mi: MI, state: executeComm, input: TL, AtS >
  if TL := extractTerms(T) .

 ***                         ***
 ***          EMPTY          ***
 ***                         ***

 rl [emptyCommList] :
    < mtp : MTP | state: executeComm, input: empty, AtS >
 => < mtp : MTP | state: idle, input: empty, AtS >
    getLine(stdin, mtp, "MTP> ") .

 ***                        ***
 ***          LOAD          ***
 ***                        ***

 crl [loadComm] :
    < mtp : MTP | state: executeComm, input: ('load_['token[T]], INPLST), AtS >
 => < mtp : MTP | state: readFile, input: INPLST, AtS >
    openFile(fileManager, mtp, STR, "r")
  if STR := string(downQid(T)) .

 ***                          ***
 ***          REDUCE          ***
 ***                          ***

 crl [redComm] :
     < mtp : MTP | state: executeComm, input: ('red_['bubble[T]], INPLST), module: M, AtS >
  => < mtp : MTP | state: print&executeComm, input: INPLST, module: M, AtS >
     write(stdout, mtp, STR)
  if {T', Ty} := metaParse(M, downQidList(T), anyType) /\
     {T'', Ty'} := metaReduce(M, T') /\
     QIL := metaPrettyPrint(M, T'') /\
     STR := "\nResult: " + printTokens(QIL) + "\n" .

 ***                            ***
 ***          OPENFILE          ***
 ***                            ***

 rl [openedFile] : openedFile(mtp, fileManager, FHIn)
    < mtp : MTP | file: null, state: readFile, AtS >
 => < mtp : MTP | file: FHIn, state: readFile, AtS >
    getLine(FHIn, mtp) .

 rl [readingModule] : gotLine(mtp, FHIn, Text)
    < mtp : MTP | file: FHIn, out: Read, state: readFile, AtS >
 => if Text == ""
    then < mtp : MTP | file: FHIn, out: Read, state: readFile, AtS >
         closeFile(FHIn, mtp)
    else < mtp : MTP | file: FHIn, out: (Read + Text), state: readFile, AtS >
         getLine(FHIn, mtp)
    fi .

 ***                               ***
 ***          FILE PARSED          ***
 ***                               ***

 rl [parseModuleMetaparse] :
    < mtp : MTP | out: Read, state: parseModMetaparse, mi: MI, AtS >
 => < mtp : MTP | out: Read, state: parseList, mi: MI, AtS >
    parseTerm(MI, mtp, 'GRAMMAR, none, tokenize(Read), '@Input@) .

 ***                               ***
 ***          FILE PARSED          ***
 ***                               ***

 crl [parseModuleNoBubblesOK] :
     parsedTerm(mtp, MI, {T, Ty})
     < mtp : MTP | out: Read, state: parseList, mi: MI, input: INPLST, AtS >
  => < mtp : MTP | out: "", state: executeComm, mi: MI, input: (TL, INPLST), AtS >
  if TL := extractTerms(T) .

 ***                                    ***
 ***          FILE PARSE ERROR          ***
 ***                                    ***

 crl [parseModuleNoBubblesError] :
     parsedTerm(mtp, MI, noParse(N))
     < mtp : MTP | out: Read, state: parseList, mi: MI, AtS >
  => < mtp : MTP | out: "", state: print&executeComm, mi: MI, AtS >
     write(stdout, mtp, printTokens(QIL))
  if QIL := showMsg(tokenize(Read), N) .

 ***                               ***
 ***          MODULE COMM          ***
 ***                               ***

 crl [moduleComm] :
     < mtp : MTP | db: DB, state: executeComm, umi: MI,
                   parsModName: MQ, bubbles: BUBBS, top: MM,
                   input: (Q[TL], INPLST), AtS >
  => < mtp : MTP | db: DB', state: parseModBubbles, umi: MI,
                   parsModName: getName(M), bubbles: TL', top: M,
                   input: INPLST, AtS >
     insertModule(MI, mtp, M)
  if (Q ==  'spec!_=_end or Q == 'spec*_=_end) /\
     [M, TL', SI, ERR] := parseModule(Q[TL]) /\
     DB' := DB[getName(M) |-> SI] .

 rl [parseModule_GetFlatModule] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: parseModBubbles, umi: MI, parsModName: Q, AtS >
 => < mtp : MTP | state: parseModBubbles, umi: MI, parsModName: Q, AtS >
    showModule(MI, mtp, Q, true) .

 crl [parseBubbles] :
     showingModule(mtp, MI, M)
     < mtp : MTP | state: parseModBubbles, umi: MI, bubbles: BUBBS,
                   top: TOP, parsModName: Q, current: MQ, db: DB, AtS >
  => < mtp : MTP | state: parseModule, umi: MI, bubbles: empty,
                   top: noMod, parsModName: noQid, current: Q, db: (DB[Q |-> VS]), AtS >
     insertModule(MI, mtp, M')
  if [M', VS, QIL] := parseBubbles(TOP, M, BUBBS) .

 rl [parsingComplete] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: parseModule, umi: MI, current: Q, AtS >
 => < mtp : MTP | state: getModule, umi: MI, current: Q, AtS >
    showModule(MI, mtp, Q, true).

 crl [updateNewModule] :
     showingModule(mtp, MI, M)
     < mtp : MTP | state: getModule, umi: MI, current: Q, module: MM, AtS >
  => < mtp : MTP | state: print&executeComm, umi: MI, current: Q, module: M, AtS >
     write(stdout, mtp, MSG)
  if MSG := "\nModule " + string(Q) + " introduced.\n\n" .


 *** TODO: parse error

 ***                                    ***
 ***          PRINT & CONTINUE          ***
 ***                                    ***

 rl [print&idle] : wrote(mtp, stdout)
    < mtp : MTP | state: print&idle, AtS >
 => < mtp : MTP | state: idle, AtS >
    getLine(stdin, mtp, "MTP> ") .

 rl [print&executeComm] : wrote(mtp, stdout)
    < mtp : MTP | state: print&executeComm, AtS >
 => < mtp : MTP | state: executeComm, AtS > .

 ***                               ***
 ***          CLOSE FILE           ***
 ***                               ***

 rl [closedFile] : closedFile(mtp, FHIn)
    < mtp : MTP | file: FHIn, state: readFile, AtS >
 => < mtp : MTP | file: null, state: parseModMetaparse, AtS > .

 ***                         ***
 ***          GOAL           ***
 ***                         ***

 crl [moduleGoal] :
     < mtp : MTP | state: executeComm, input: ('goal_|-_['token[T1],T2]),
                   umi: MI, AtS >
  => < mtp : MTP | state: processGoal, input: ('goal_|-_['token[T1],T2]),
                   umi: MI, AtS >
     showModule(MI, mtp, Q, true)
  if Q := downQid(T1) .

 crl [processGoal] :
     showingModule(mtp, MI, M)
     < mtp : MTP | state: processGoal, input: ('goal_|-_['token[T1],T2]),
                   umi: MI, goal: GL, db: DB, AtS >
  => < mtp : MTP | state: print&executeComm, input: empty, umi: MI, goal: G, db: DB, AtS >
     write(stdout, mtp, "\nGoal introduced.\n")
  if Q := downQid(T1) /\
     G := processGoal(M, T2, getVS(DB[Q])) .

 ***                         ***
 ***          EXIT           ***
 ***                         ***

 rl [exit] :
    < mtp : MTP | state: executeComm, input: ('exit.@Command@), AtS >
 => write(stdout, mtp, "Thanks for using MTP!\n") [print AtS] .

 rl [quit] :
    < mtp : MTP | state: executeComm, input: ('q.@Command@), AtS >
 => write(stdout, mtp, "Thanks for using MTP!\n") .

 ***                        ***
 ***          ERROR         ***
 ***                        ***

 rl [parseCommError] :
    parsedTerm(mtp, MI, noParse(N))
    < mtp : MTP | mi: MI, state: parseComm, AtS >
 => < mtp : MTP | mi: MI, state: print&idle, AtS >
    write(stdout, mtp, "The introduced command does not exit.\n") .

 ***                          ***
 ***          CREATE          ***
 ***      METAINTERPRETER     ***
 ***                          ***

 rl [init-module] :
    createdInterpreter(mtp, interpreterManager, MI)
    < mtp : MTP | state: init, load: module(Q) LP, AtS >
 => < mtp : MTP | state: load-std-db, mi: MI, load: LP, AtS >
    insertModule(MI, mtp, upModule(Q, false)) .

 rl [init-view] :
    createdInterpreter(mtp, interpreterManager, MI)
    < mtp : MTP | state: init, load: view(Q) LP, AtS >
 => < mtp : MTP | state: load-std-db, mi: MI, load: LP, AtS >
    insertView(MI, mtp, upView(Q)) .

 rl [load-predef-module-from-module] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: load-std-db, load: module(Q) LP, AtS >
 => < mtp : MTP | state: load-std-db, load: LP, AtS >
    insertModule(MI, mtp, upModule(Q, false)) .

 rl [load-predef-view-from-module] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: load-std-db, load: view(Q) LP, AtS >
 => < mtp : MTP | state: load-std-db, load: LP, AtS >
    insertView(MI, mtp, upView(Q)) .

 rl [load-predef-module-from-view] :
    insertedView(mtp, MI)
    < mtp : MTP | state: load-std-db, load: module(Q) LP, AtS >
 => < mtp : MTP | state: load-std-db, load: LP, AtS >
    insertModule(MI, mtp, upModule(Q, false)) .

 rl [load-predef-view-from-view] :
    insertedView(mtp, MI)
    < mtp : MTP | state: load-std-db, load: view(Q) LP, AtS >
 => < mtp : MTP | state: load-std-db, load: LP, AtS >
    insertView(MI, mtp, upView(Q)) .

 rl [load-predef-finished] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: load-std-db, load: nil, AtS >
 => < mtp : MTP | state: load-grammar, AtS >
    insertModule(MI, mtp, GRAMMAR) .

 rl [load-grammar-finished] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: load-grammar, AtS >
 => < mtp : MTP | state: load-user-mi, AtS >
    createInterpreter(interpreterManager, mtp, none) .

 rl [user-metainterpreter-created] :
    createdInterpreter(mtp, interpreterManager, MI)
    < mtp : MTP | state: load-user-mi, uload: module(Q) LP, AtS >
 => < mtp : MTP | state: load-user-mods, umi: MI, uload: LP, AtS >
    insertModule(MI, mtp, upModule(Q, false)) .

 rl [load-user-predef-module-metainterpreter] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: load-user-mods, uload: module(Q) LP, AtS >
 => < mtp : MTP | state: load-user-mods, uload: LP, AtS >
    insertModule(MI, mtp, upModule(Q, false)) .

 rl [user-predef-module-metainterpreter-finished] :
    insertedModule(mtp, MI)
    < mtp : MTP | state: load-user-mods, uload: nil, AtS >
 => < mtp : MTP | state: idle, AtS >
    getLine(stdin, mtp, "MTP> ") .

 ***                        ***
 ***          RUN           ***
 ***                        ***

 eq run =
    <> < mtp : MTP | file: null, out: "", state: init, db: empty,
                     load: modList, uload: umodList, current: noQid,
                     parsModName: noQid, bubbles: empty, top: noMod,
                     input: empty, module: noMod, goal: noGoal >
    createInterpreter(interpreterManager, mtp, none) .
endm

set print conceal on .
print conceal module:_ .

set print attribute on .
set show advisories on .

erew run .

*** goal MyLogic |- eq forall L . empty = empty
